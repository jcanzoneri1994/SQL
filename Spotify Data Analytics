#This project contains Spotify data from Kaggle.
#I then created a table to insert the Spotify data into.
#Finally, I created SQL queries to analyze the data in the table.


#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.
#Next, I explored the data using the following SQL. 

#1. What is the average danceability by artist and track?
SELECT track_name, artist_name, AVG(danceability) FROM BIT_DB.Spotifydata
GROUP BY track_name, artist_name;

#2. Who are the top 10 artists based on popularity?
SELECT artist_name FROM BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 10;

#3. Which artist released the longest song?  What was the name of the song and how long was it?
SELECT artist_name, track_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC LIMIT 1;

#4. What is the average liveness for the top 10 songs?
SELECT AVG(liveness) FROM BIT_DB.Spotifydata
ORDER BY liveness DESC LIMIT 10;

#5. What is the average danceability of all songs?
SELECT AVG(danceability)
FROM BIT_DB.Spotifydata;

#6. Rank the danceability of each song with the following titles: 'very danceable', 'danceable', and 'lower danceability'.
SELECT track_name, artist_name, danceability,
CASE
WHEN danceability >= 0.7 THEN'very danceable'
WHEN danceability >= 0.5 THEN 'danceable'
ELSE 'less danceable'
END AS 'danceability ranking'
FROM BIT_DB.Spotifydata
ORDER BY danceability DESC;

7. Which artist has the most amount of songs in the top 50 list and how many songs does that artist have?
SELECT artist_name, COUNT(artist_name) AS 'artist name count'
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY COUNT(artist_name) DESC LIMIT 1;
